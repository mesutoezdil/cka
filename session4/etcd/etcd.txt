ETCD Backup and Restore in Kubernetes
ETCD Backup
ETCD Backup captures the configuration and state data of a Kubernetes cluster. ETCD serves as the central data store of Kubernetes, holding information about all cluster resources. A backup ensures data recovery in case of failures.
Importance of ETCD Backup:
Data Loss Protection: Protects data in case of ETCD corruption.
Disaster Recovery: Enables quick recovery during cluster failures.
Upgrade Safety: Provides a safety net during upgrades or changes.
Cluster Health: Ensures proper functionality of ETCD.
Backup Command:
ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 \
  --cacert=<trusted-ca-file> --cert=<cert-file> --key=<key-file> \
  snapshot save </path/snapshot.db>
Steps:
Use kubectl describe pods -n kube-system etcd-masternode or inspect the manifest:
cd /etc/kubernetes/manifests/
sudo cat etcd.yaml
This helps identify endpoint, certificate, and key values.
Verify Backup:
ETCDCTL_API=3 etcdctl --write-out=table snapshot status /path/snapshot.db
You should see output similar to the example provided in the documentation.
ETCD Restore
ETCD Restore uses the backup snapshot to recover the cluster's previous state. This process is critical when the cluster experiences corruption or data loss.
Restore Command:
ETCDCTL_API=3 etcdctl --data-dir /var/lib/etcd-snapshot snapshot restore /path/snapshot.db
Steps:
Restore Snapshot:
Create a directory /var/lib/etcd-snapshot and place the restored snapshot inside it.
Update the ETCD manifest:
Modify the etcd.yaml file to point to the new hostPath:
cd /etc/kubernetes/manifests/
vim etcd.yaml
Change the path to /var/lib/etcd-snapshot.
Verify Changes:
Use the following commands to verify the restoration process:
kubectl get pods -n kube-system
kubectl get pods -n kube-system etcd-masternode
Note that it may take a few minutes for the changes to take effect.
Official Documentation: Refer to the Kubernetes ETCD backup and restore documentation for additional details.
